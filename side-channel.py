#------------------------------------------------
import scipy.io as sio
import matplotlib.pyplot as plt
import numpy as np
import time

#Declacarations
#------------------------------------------------
xmin = 7200
xmax = 8000
duration = xmax-xmin
total_key = []

def CorrelationPearson(x, y):
    mean_x = np.mean(x)
    mean_y = np.mean(y)
    std_x = np.std(x)
    std_y = np.std(y)
    return np.sum((x-mean_x)*(y-mean_y))/(len(x)*std_x*std_y)

def H_distance(x, y):
    return bin(x ^ y).count("1")

def inv_shift_row(mat, index):
    if(index %4 == 0):
        return mat[index]
    elif(index %4 == 1):
        return mat[(index-4)%16]
    elif(index %4 == 2):
        return mat[(index-8)%16]
    elif(index %4 == 3):
        return mat[(index-12)%16]
    
def get_h(tab, bit):
    cto_xor = np.zeros((2000,255), dtype=int)

    for k in range(255):
        for i in range(2000):
            cto_xor[i][k] = inv_shift_row(tab[i], bit)
            cto_xor[i][k] = cto_xor[i][k] ^ k
            cto_xor[i][k] = sbox_inv[cto_xor[i][k]]
            cto_xor[i][k] = H_distance(cto_xor[i][k], tab[i][bit])

    return cto_xor

def do_correl(h, traces_mat):
    ctox0 = np.transpose(h)

    result = np.zeros((255, duration), dtype=float)

    for i in range(xmin, xmax):
        for k in range(255):
            result[k][i-xmin] = CorrelationPearson(ctox0[k], traces_mat[i])

    return result

def get_keys(mat, bit):
    keys = np.zeros(255, dtype=float)

    for k in range(255):
        keys[k] = np.max(mat[k])

    print("Byte nÂ°", bit, " is", hex(np.argmax(keys)))

    return hex(np.argmax(keys))

def append_key(list, hexa):
    list.append(hexa)
    return list

# Sbox inverted
#------------------------------------------------
sbox_inv = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
                   0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
                   0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
                   0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
                   0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
                   0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
                   0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
                   0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
                   0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
                   0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
                   0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
                   0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
                   0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
                   0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
                   0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
                   0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]

#Loading traces + CTO
#------------------------------------------------
data = sio.loadmat('/home/matthis/Documents/SECU_HARDWARE/DFA_ISEN/Traces.mat')
traces = data['Traces']

data2 = sio.loadmat('/home/matthis/Documents/SECU_HARDWARE/DFA_ISEN/CTO.mat')
cto = data2['CTO']

#Transpose traces + CTO for manipulation using columns
#------------------------------------------------
traces_transpose = np.transpose(traces)
#------------------------------------------------
for bit in range(16):
    start = time.time()

    h = get_h(cto, bit)

    mat_correl = do_correl(h, traces_transpose)

    key_piece = get_keys(mat_correl, bit)

    total_key = append_key(total_key, key_piece)

    end = time.time()
    elapsed = end - start
    print("Round finished in :", round(elapsed, 1), "seconds")

print("Key is ", total_key)